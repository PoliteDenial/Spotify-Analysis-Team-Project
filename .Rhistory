names = c(names,name2)
}
artist_names<- c()
for (i in tracks$id){
name2<-c(get_tracks(i)[["name"]])
names = c(names,name2)
}
artist_names
tracks <- tracks %>% mutate(name = unique(names)) %>% relocate(name)
tracks <-   data.frame()
for (i in songKeys) {
tracks <- rbind(tracks,get_track_audio_features(i))
}
names<- c()
for (i in tracks$id){
name2<-c(get_tracks(i)[["name"]])
names = c(names,name2)
}
artist_names<- c()
for (i in tracks$id){
name2<-c(get_tracks(i)[["name"]])
names = c(names,name2)
}
artist_names
tracks <- tracks %>% mutate(name = unique(names)) %>% relocate(name)
id ='71e950603dd64e1291d04fabafee04d9'
secret = '5331da62c4644ee887ff07216c35b183'
Sys.setenv(SPOTIFY_CLIENT_ID = id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = secret)
access_token <- get_spotify_access_token()
#access_token
tracks <-   data.frame()
for (i in songKeys) {
tracks <- rbind(tracks,get_track_audio_features(i))
}
names<- c()
for (i in tracks$id){
name2<-c(get_tracks(i)[["name"]])
names = c(names,name2)
}
artist_names<- c()
for (i in tracks$id){
name2<-c(get_tracks(i)[["name"]])
names = c(names,name2)
}
artist_names
tracks <- tracks %>% mutate(name = unique(names)) %>% relocate(name)
get_tracks("26wuBc04catG1QQyYupr35")[[1]]
get_artists(get_tracks("26wuBc04catG1QQyYupr35")[[1]])[["genres"]]
p_id = "zain_elsell" #personal id
# #This is where the control  data was taken from:
# url_charts_local = "https://charts.spotify.com/charts/view/citypulsetrack-denver-weekly/latest"
# url_charts_login_redirct = "https://accounts.spotify.com/en/login?continue=https%3A%2F%2Fcharts.spotify.com/login"
key_to_df <- function(x){
df <- data.frame()
for (i in x)
{
df <- rbind(df,get_track_audio_features(i))
}
names<- c()
for (i in df$id){
name2<-c(get_tracks(i)[["name"]])
names = c(names,name2)
}
artist_names<- c()
for (i in df$id){
temp <- get_tracks(i)[1]
tempdf <- data.frame(temp[[1]])
tempname <- tempdf[["name"]][1]
artist_names = c(artist_names,tempname)
}
df <- df %>% mutate(song_name = unique(names), artist_name = artist_names) %>% relocate(artist_name) %>% relocate(song_name)
tracks = df
tracks <- tracks %>% select(-c(mode,type,uri,
track_href,analysis_url))
tracks
return(tracks)
}
scrape_table = function(file_name, keys = 1, links = 0)#params raw html table class you want to scrape .txt file name/ do you want just the song song keys? / do yo you want the full links to the tracks?
{
htmlVectorRaw = read_file(file_name) #vector of every charter in the raw html
all_links = pickURL::pick_urls(htmlVectorRaw) # picks out all occurrences of links in the raw html code
songlinks= c() #blank vector to store just song links
url_pattern = "https://open.spotify.com/track/" #track link pattern
for(i in 1:length(all_links)) #get only song links in all_links
{
if(str_detect(all_links[i], url_pattern))
{
songlinks =c(songlinks, all_links[i])
}
}
if(keys){songKeys = str_replace_all(songlinks, url_pattern, "")}
else if(links){return(songlinks)}
else return(songKeys)
}
raw_html_file_name = "Local_Pulse_March_28.txt"#For teting use local pulse march 28 so we have control for values to expect
songKeys = scrape_table(raw_html_file_name)
songKeys
key_to_df(songKeys)
p_id = "zain_elsell" #personal id
# #This is where the control  data was taken from:
# url_charts_local = "https://charts.spotify.com/charts/view/citypulsetrack-denver-weekly/latest"
# url_charts_login_redirct = "https://accounts.spotify.com/en/login?continue=https%3A%2F%2Fcharts.spotify.com/login"
key_to_df <- function(x){
df <- data.frame()
for (i in x)
{
df <- rbind(df,get_track_audio_features(i))
}
names<- c()
for (i in df$id){
name2<-c(get_tracks(i)[["name"]])
names = c(names,name2)
}
artist_names<- c()
for (i in df$id){
temp <- get_tracks(i)[1]
tempdf <- data.frame(temp[[1]])
tempname <- tempdf[["name"]][1]
artist_names = c(artist_names,tempname)
}
df <- df %>% mutate(song_name = unique(names), artist_name = artist_names) %>% relocate(artist_name) %>% relocate(song_name)
tracks = df
tracks <- tracks %>% select(-c(mode,type,uri,
track_href,analysis_url))
tracks
return(tracks)
}
scrape_table = function(file_name, keys = 1, links = 0)#params raw html table class you want to scrape .txt file name/ do you want just the song song keys? / do yo you want the full links to the tracks?
{
htmlVectorRaw = read_file(file_name) #vector of every charter in the raw html
all_links = pickURL::pick_urls(htmlVectorRaw) # picks out all occurrences of links in the raw html code
songlinks= c() #blank vector to store just song links
url_pattern = "https://open.spotify.com/track/" #track link pattern
for(i in 1:length(all_links)) #get only song links in all_links
{
if(str_detect(all_links[i], url_pattern))
{
songlinks =c(songlinks, all_links[i])
}
}
if(keys){songKeys = str_replace_all(songlinks, url_pattern, "")}
else if(links){return(songlinks)}
else return(songKeys)
}
raw_html_file_name = "Local_Pulse_March_28.txt"#For teting use local pulse march 28 so we have control for values to expect
songKeys = scrape_table(raw_html_file_name)
songKeys
trackDf = key_to_df(songKeys)
IntialScrapeDate = "2022-03-28"
FinalScrapeDate = "2021-01-01"
seq.Date(from = as.Date('2019-07-01'), to = as.Date('2019-07-10'), by = 'weeks') # base
IntialScrapeDate = "2022-03-28"
FinalScrapeDate = "2021-01-01"
seq.Date(from = as.Date(IntialScrapeDate), to = as.Date(FinalScrapeDate), by = 'week') # base
IntialScrapeDate = "2022-03-28"
FinalScrapeDate = "2021-01-01"
seq.Date(from = as.Date(IntialScrapeDate), to = as.Date(FinalScrapeDate), by = 'weeks') # base
IntialScrapeDate = "2022-03-28"
FinalScrapeDate = "2021-01-01"
seq.Date(from = as.Date(IntialScrapeDate), to = as.Date(FinalScrapeDate), by = 'weeks') # base
IntialScrapeDate = "2022-03-28"
FinalScrapeDate = "2021-01-01"
seq.Date(from = as.Date(IntialScrapeDate), to = as.Date(FinalScrapeDate), by = 'weeks') # base
?seq.Date()
IntialScrapeDate = "2022-03-28"
FinalScrapeDate = "2021-01-01"
seq.Date(from = as.Date(FinalScrapeDate), to = as.Date(IntialScrapeDate), by = 'weeks') # base
F_Scrape_day = "2022-03-28"
I_Scrape_day = "2021-01-01"
seq.Date(from = as.Date(I_Scrape_day), to = as.Date(F_Scrape_day), by = 'weeks') # base
F_Scrape_day = "2022-03-18"
I_Scrape_day = "2021-01-01"
seq.Date(from = as.Date(I_Scrape_day), to = as.Date(F_Scrape_day), by = 'weeks') # base
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(spotifyr)
library(stringr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(readr)
library(knitr)
library(reticulate)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(spotifyr)
library(stringr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(readr)
library(knitr)
library(reticulate)
install.packages("reticulate")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(spotifyr)
library(stringr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(readr)
library(knitr)
library(reticulate)
use_python("/usr/Local/bin/python")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(spotifyr)
library(stringr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(readr)
library(knitr)
library(reticulate)
#install.packages("remotes")
#remotes::install_github("mvkorpel/pickURL")
reticulate::repl_python()
Y
print("Test")
import pyautogui
print(pyautogui.size())
print("Test")
pip3 install pyautogui
import pyautogui
print(pyautogui.size())
print("Test")
quit
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)#tidy
library(spotifyr)#spotify web api wrapper class
library(stringr)#string processing
library(ggplot2)#ggplot for testing
library(lubridate) #dates
library(readr) #text file reading
library(knitr) #live knit files
library(reticulate) #python cells and interaction with R requires miniConda
#install.packages("remotes") #
#remotes::install_github("mvkorpel/pickURL")
reticulate::repl_python()
pyautogui.moveTo(100, 100, duration = 1)
pyautogui.moveTo(100, 100, duration = 1)
pyautogui.moveTo(100, 100, duration = 1)
quit
F_Scrape_day = "2022-03-18"
I_Scrape_day = "2021-01-01"
openTag = '<table cellpadding="12" class="Table__TableElement-evwssh-0 eAsZoj ChartsTable__StyledTable-sc-1ye7294-5 iQeNyw"><colgroup><col width="48px"><col width="5%"><colwidth="64%">'
closeTag = '</table>'
dateSeq = seq.Date(from = as.Date(I_Scrape_day), to = as.Date(F_Scrape_day), by = 'weeks') # base
dateSeq
reticulate::repl_python()
pyautogui.moveTo(100, 100, duration = 1)
pyautogui.click(100, 100)
pyautogui.moveTo(100, 100, duration = 1)
pyautogui.click(100, 100)
pyautogui.moveTo(300, 100, duration = 1)
pyautogui.click(100, 100)
pyautogui.moveTo(100, 400, duration = 1)
pyautogui.click(100, 100)
pyautogui.moveTo(100, 200, duration = 1)
pyautogui.click(100, 100)
pyautogui.moveTo(100, 200, duration = 1)
#pyautogui.click(100, 100)
pyautogui.moveTo(300, 200, duration = 1)
#pyautogui.click(100, 100)
pyautogui.moveTo(400, 200, duration = 1)
#pyautogui.click(100, 100)
pyautogui.moveTo(400, 200, duration = 1)
#pyautogui.click(100, 100)
pyautogui.moveTo(400, 500, duration = 1)
#pyautogui.click(100, 100)
pyautogui.moveTo(100, 500, duration = 1)
#pyautogui.click(100, 100)
pyautogui.moveTo(100, 500, duration = 1)
#pyautogui.click(100, 100)
pyautogui.moveTo(100, 500, duration = 1)
#pyautogui.click(100, 100)
pyautogui.moveTo(100, 600, duration = 1)
#pyautogui.click(100, 100)
pyautogui.moveTo(100, 800, duration = 1)
#pyautogui.click(100, 100)
import pyautogui as pgui
print(pgui.size()) #gets size of primarary monitor
printMousePos(){
print('Press Ctrl-C to quit.')
try:
while True:
x, y = pyautogui.position()
positionStr = 'X: ' + str(x).rjust(4) + ' Y: ' + str(y).rjust(4)
print(positionStr, end='')
print('\b' * len(positionStr), end='', flush=True)
except KeyboardInterrupt:
print('\n')
}
pyautogui.moveTo(100, 800, duration = 1)
#pyautogui.click(100, 100)
printMousePos(){
print('Press Ctrl-C to quit.')
try:
while True:
x, y = pyautogui.position()
positionStr = 'X: ' + str(x).rjust(4) + ' Y: ' + str(y).rjust(4)
print(positionStr, end='')
print('\b' * len(positionStr), end='', flush=True)
except KeyboardInterrupt:
print('\n')
}
pygui.move(749, 79)
import pyautogui as pygui
import sys
print(pgui.size()) #gets size of primarary monitor
pygui.move(749, 79)
pygui.moveTo(749, 79)
pygui.moveTo(749, 79)
printMousePos(){
print('Press Ctrl-C to quit.')
try:
while True:
x, y = pyautogui.position()
positionStr = 'X: ' + str(x).rjust(4) + ' Y: ' + str(y).rjust(4)
print(positionStr, end='')
print('\b' * len(positionStr), end='', flush=True)
except KeyboardInterrupt:
print('\n')
}
pygui.moveTo(151, 775)
pygui.moveTo(151, 775)
pygui.moveTo(151, 775)
pygui.moveTo(151, 775)
pygui.moveTo(151, 765)
printMousePos(){
print('Press Ctrl-C to quit.')
try:
while True:
x, y = pyautogui.position()
positionStr = 'X: ' + str(x).rjust(4) + ' Y: ' + str(y).rjust(4)
print(positionStr, end='')
print('\b' * len(positionStr), end='', flush=True)
except KeyboardInterrupt:
print('\n')
}
pygui.moveTo(151, 787)
pygui.moveTo(151, 787)
pygui.moveTo(151, 787)
printMousePos(){
print('Press Ctrl-C to quit.')
try:
while True:
x, y = pyautogui.position()
positionStr = 'X: ' + str(x).rjust(4) + ' Y: ' + str(y).rjust(4)
print(positionStr, end='')
print('\b' * len(positionStr), end='', flush=True)
except KeyboardInterrupt:
print('\n')
}
reticulate::repl_python()
pygui.moveTo(151, 787)
reticulate::repl_python()
printMousePos(){
reticulate::repl_python()
import pyautogui as pygui
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)#tidy
library(spotifyr)#spotify web api wrapper class
library(stringr)#string processing
library(ggplot2)#ggplot for testing
library(lubridate) #dates
library(readr) #text file reading
library(knitr) #live knit files
library(reticulate) #python cells and interaction with R requires miniConda
#install.packages("remotes") #
#remotes::install_github("mvkorpel/pickURL")
reticulate::repl_python()
import pyautogui as pygui
reticulate::repl_python()
import pyautogui as pygui
reticulate::repl_python()
import pyautogui as pygui
reticulate::repl_python()
import pyautogui as pygui
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)#tidy
library(spotifyr)#spotify web api wrapper class
library(stringr)#string processing
library(ggplot2)#ggplot for testing
library(lubridate) #dates
library(readr) #text file reading
library(knitr) #live knit files
library(reticulate) #python cells and interaction with R requires miniConda
#install.packages("remotes") #
#remotes::install_github("mvkorpel/pickURL")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)#tidy
library(spotifyr)#spotify web api wrapper class
library(stringr)#string processing
library(ggplot2)#ggplot for testing
library(lubridate) #dates
library(readr) #text file reading
library(knitr) #live knit files
library(reticulate) #python cells and interaction with R requires miniConda
#install.packages("remotes") #
#remotes::install_github("mvkorpel/pickURL")
reticulate::repl_python()
import pyautogui as pygui
import win32clipboard
import sys
print(pygui.size()) #gets size of primarary monitor
f = open("AutoData.txt", "a")
def pasteToFile():
win32clipboard.OpenClipboard()
data = win32clipboard.GetClipboardData()
f.write(data)
print(data)
win32clipboard.CloseClipboard()
def copyTable():
pygui.moveTo(161, 787)
pygui.click(button = 'right')
pygui.moveTo(161, 767)
pygui.click(button = 'left')
pygui.moveTo(1282, 380)
pygui.click(button = 'right')
pygui.moveTo(1282, 528)
pygui.moveTo(1382, 528, duration = 0.5)
pygui.moveTo(1582, 528, )
pygui.click(button = 'left')
def selectPrevWeek():
pygui.moveTo(275,745)
pygui.click(button = 'left')
pygui.scroll(-110)
copyTable()
pasteToFile()
#selectPrevWeek()
f = open("AutoData.txt", "a")
f.write("Test")
def pasteToFile():
win32clipboard.OpenClipboard()
data = win32clipboard.GetClipboardData()
f.write(data)
print(data)
win32clipboard.CloseClipboard()
def copyTable():
pygui.moveTo(161, 787)
pygui.click(button = 'right')
pygui.moveTo(161, 767)
pygui.click(button = 'left')
pygui.moveTo(1282, 380)
pygui.click(button = 'right')
pygui.moveTo(1282, 528)
pygui.moveTo(1382, 528, duration = 0.5)
pygui.moveTo(1582, 528, )
pygui.click(button = 'left')
def selectPrevWeek():
pygui.moveTo(275,745)
pygui.click(button = 'left')
pygui.scroll(-110)
copyTable()
#pasteToFile()
#selectPrevWeek()
f = open("AutoData.txt", "a")
f.write("Test")
def pasteToFile():
win32clipboard.OpenClipboard()
data = win32clipboard.GetClipboardData()
f.write(data)
print(data)
win32clipboard.CloseClipboard()
def copyTable():
pygui.moveTo(161, 787)
pygui.click(button = 'right')
pygui.moveTo(161, 767)
pygui.click(button = 'left')
pygui.moveTo(1282, 380)
pygui.click(button = 'right')
pygui.moveTo(1282, 528)
pygui.moveTo(1382, 528, duration = 0.5)
pygui.moveTo(1582, 528, )
pygui.click(button = 'left')
def selectPrevWeek():
pygui.moveTo(275,745)
pygui.click(button = 'left')
pygui.scroll(-110)
copyTable()
#pasteToFile()
#selectPrevWeek()
f = open("AutoData.txt", "a")
f.write("Test")
def pasteToFile():
win32clipboard.OpenClipboard()
data = win32clipboard.GetClipboardData()
f.write(data)
print(data)
win32clipboard.CloseClipboard()
def copyTable():
pygui.moveTo(161, 787)
pygui.click(button = 'right')
pygui.moveTo(161, 767)
pygui.click(button = 'left')
pygui.moveTo(1282, 380)
pygui.click(button = 'right')
pygui.moveTo(1282, 528)
pygui.moveTo(1382, 528, duration = 0.5)
pygui.moveTo(1582, 528, )
pygui.click(button = 'left')
def selectPrevWeek():
pygui.moveTo(275,745)
pygui.click(button = 'left')
pygui.scroll(-110)
copyTable()
#pasteToFile()
#selectPrevWeek()
