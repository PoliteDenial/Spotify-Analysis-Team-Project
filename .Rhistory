seq.Date(from = as.Date(IntialScrapeDate), to = as.Date(FinalScrapeDate), by = 'weeks') # base
?seq.Date()
IntialScrapeDate = "2022-03-28"
FinalScrapeDate = "2021-01-01"
seq.Date(from = as.Date(FinalScrapeDate), to = as.Date(IntialScrapeDate), by = 'weeks') # base
F_Scrape_day = "2022-03-28"
I_Scrape_day = "2021-01-01"
seq.Date(from = as.Date(I_Scrape_day), to = as.Date(F_Scrape_day), by = 'weeks') # base
F_Scrape_day = "2022-03-18"
I_Scrape_day = "2021-01-01"
seq.Date(from = as.Date(I_Scrape_day), to = as.Date(F_Scrape_day), by = 'weeks') # base
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(spotifyr)
library(stringr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(readr)
library(knitr)
library(reticulate)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(spotifyr)
library(stringr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(readr)
library(knitr)
library(reticulate)
install.packages("reticulate")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(spotifyr)
library(stringr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(readr)
library(knitr)
library(reticulate)
use_python("/usr/Local/bin/python")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(spotifyr)
library(stringr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(readr)
library(knitr)
library(reticulate)
#install.packages("remotes")
#remotes::install_github("mvkorpel/pickURL")
reticulate::repl_python()
Y
print("Test")
import pyautogui
print(pyautogui.size())
print("Test")
pip3 install pyautogui
import pyautogui
print(pyautogui.size())
print("Test")
quit
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)#tidy
library(spotifyr)#spotify web api wrapper class
library(stringr)#string processing
library(ggplot2)#ggplot for testing
library(lubridate) #dates
library(readr) #text file reading
library(knitr) #live knit files
library(reticulate) #python cells and interaction with R requires miniConda
#install.packages("remotes") #
#remotes::install_github("mvkorpel/pickURL")
reticulate::repl_python()
pyautogui.moveTo(100, 100, duration = 1)
pyautogui.moveTo(100, 100, duration = 1)
pyautogui.moveTo(100, 100, duration = 1)
quit
F_Scrape_day = "2022-03-18"
I_Scrape_day = "2021-01-01"
openTag = '<table cellpadding="12" class="Table__TableElement-evwssh-0 eAsZoj ChartsTable__StyledTable-sc-1ye7294-5 iQeNyw"><colgroup><col width="48px"><col width="5%"><colwidth="64%">'
closeTag = '</table>'
dateSeq = seq.Date(from = as.Date(I_Scrape_day), to = as.Date(F_Scrape_day), by = 'weeks') # base
dateSeq
reticulate::repl_python()
pyautogui.moveTo(100, 100, duration = 1)
pyautogui.click(100, 100)
pyautogui.moveTo(100, 100, duration = 1)
pyautogui.click(100, 100)
pyautogui.moveTo(300, 100, duration = 1)
pyautogui.click(100, 100)
pyautogui.moveTo(100, 400, duration = 1)
pyautogui.click(100, 100)
pyautogui.moveTo(100, 200, duration = 1)
pyautogui.click(100, 100)
pyautogui.moveTo(100, 200, duration = 1)
#pyautogui.click(100, 100)
pyautogui.moveTo(300, 200, duration = 1)
#pyautogui.click(100, 100)
pyautogui.moveTo(400, 200, duration = 1)
#pyautogui.click(100, 100)
pyautogui.moveTo(400, 200, duration = 1)
#pyautogui.click(100, 100)
pyautogui.moveTo(400, 500, duration = 1)
#pyautogui.click(100, 100)
pyautogui.moveTo(100, 500, duration = 1)
#pyautogui.click(100, 100)
pyautogui.moveTo(100, 500, duration = 1)
#pyautogui.click(100, 100)
pyautogui.moveTo(100, 500, duration = 1)
#pyautogui.click(100, 100)
pyautogui.moveTo(100, 600, duration = 1)
#pyautogui.click(100, 100)
pyautogui.moveTo(100, 800, duration = 1)
#pyautogui.click(100, 100)
import pyautogui as pgui
print(pgui.size()) #gets size of primarary monitor
printMousePos(){
print('Press Ctrl-C to quit.')
try:
while True:
x, y = pyautogui.position()
positionStr = 'X: ' + str(x).rjust(4) + ' Y: ' + str(y).rjust(4)
print(positionStr, end='')
print('\b' * len(positionStr), end='', flush=True)
except KeyboardInterrupt:
print('\n')
}
pyautogui.moveTo(100, 800, duration = 1)
#pyautogui.click(100, 100)
printMousePos(){
print('Press Ctrl-C to quit.')
try:
while True:
x, y = pyautogui.position()
positionStr = 'X: ' + str(x).rjust(4) + ' Y: ' + str(y).rjust(4)
print(positionStr, end='')
print('\b' * len(positionStr), end='', flush=True)
except KeyboardInterrupt:
print('\n')
}
pygui.move(749, 79)
import pyautogui as pygui
import sys
print(pgui.size()) #gets size of primarary monitor
pygui.move(749, 79)
pygui.moveTo(749, 79)
pygui.moveTo(749, 79)
printMousePos(){
print('Press Ctrl-C to quit.')
try:
while True:
x, y = pyautogui.position()
positionStr = 'X: ' + str(x).rjust(4) + ' Y: ' + str(y).rjust(4)
print(positionStr, end='')
print('\b' * len(positionStr), end='', flush=True)
except KeyboardInterrupt:
print('\n')
}
pygui.moveTo(151, 775)
pygui.moveTo(151, 775)
pygui.moveTo(151, 775)
pygui.moveTo(151, 775)
pygui.moveTo(151, 765)
printMousePos(){
print('Press Ctrl-C to quit.')
try:
while True:
x, y = pyautogui.position()
positionStr = 'X: ' + str(x).rjust(4) + ' Y: ' + str(y).rjust(4)
print(positionStr, end='')
print('\b' * len(positionStr), end='', flush=True)
except KeyboardInterrupt:
print('\n')
}
pygui.moveTo(151, 787)
pygui.moveTo(151, 787)
pygui.moveTo(151, 787)
printMousePos(){
print('Press Ctrl-C to quit.')
try:
while True:
x, y = pyautogui.position()
positionStr = 'X: ' + str(x).rjust(4) + ' Y: ' + str(y).rjust(4)
print(positionStr, end='')
print('\b' * len(positionStr), end='', flush=True)
except KeyboardInterrupt:
print('\n')
}
reticulate::repl_python()
pygui.moveTo(151, 787)
reticulate::repl_python()
printMousePos(){
reticulate::repl_python()
import pyautogui as pygui
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)#tidy
library(spotifyr)#spotify web api wrapper class
library(stringr)#string processing
library(ggplot2)#ggplot for testing
library(lubridate) #dates
library(readr) #text file reading
library(knitr) #live knit files
library(reticulate) #python cells and interaction with R requires miniConda
#install.packages("remotes") #
#remotes::install_github("mvkorpel/pickURL")
reticulate::repl_python()
import pyautogui as pygui
reticulate::repl_python()
import pyautogui as pygui
reticulate::repl_python()
import pyautogui as pygui
reticulate::repl_python()
import pyautogui as pygui
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)#tidy
library(spotifyr)#spotify web api wrapper class
library(stringr)#string processing
library(ggplot2)#ggplot for testing
library(lubridate) #dates
library(readr) #text file reading
library(knitr) #live knit files
library(reticulate) #python cells and interaction with R requires miniConda
#install.packages("remotes") #
#remotes::install_github("mvkorpel/pickURL")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)#tidy
library(spotifyr)#spotify web api wrapper class
library(stringr)#string processing
library(ggplot2)#ggplot for testing
library(lubridate) #dates
library(readr) #text file reading
library(knitr) #live knit files
library(reticulate) #python cells and interaction with R requires miniConda
#install.packages("remotes") #
#remotes::install_github("mvkorpel/pickURL")
reticulate::repl_python()
import pyautogui as pygui
import win32clipboard
import sys
print(pygui.size()) #gets size of primarary monitor
f = open("AutoData.txt", "a")
def pasteToFile():
win32clipboard.OpenClipboard()
data = win32clipboard.GetClipboardData()
f.write(data)
print(data)
win32clipboard.CloseClipboard()
def copyTable():
pygui.moveTo(161, 787)
pygui.click(button = 'right')
pygui.moveTo(161, 767)
pygui.click(button = 'left')
pygui.moveTo(1282, 380)
pygui.click(button = 'right')
pygui.moveTo(1282, 528)
pygui.moveTo(1382, 528, duration = 0.5)
pygui.moveTo(1582, 528, )
pygui.click(button = 'left')
def selectPrevWeek():
pygui.moveTo(275,745)
pygui.click(button = 'left')
pygui.scroll(-110)
copyTable()
pasteToFile()
#selectPrevWeek()
f = open("AutoData.txt", "a")
f.write("Test")
def pasteToFile():
win32clipboard.OpenClipboard()
data = win32clipboard.GetClipboardData()
f.write(data)
print(data)
win32clipboard.CloseClipboard()
def copyTable():
pygui.moveTo(161, 787)
pygui.click(button = 'right')
pygui.moveTo(161, 767)
pygui.click(button = 'left')
pygui.moveTo(1282, 380)
pygui.click(button = 'right')
pygui.moveTo(1282, 528)
pygui.moveTo(1382, 528, duration = 0.5)
pygui.moveTo(1582, 528, )
pygui.click(button = 'left')
def selectPrevWeek():
pygui.moveTo(275,745)
pygui.click(button = 'left')
pygui.scroll(-110)
copyTable()
#pasteToFile()
#selectPrevWeek()
f = open("AutoData.txt", "a")
f.write("Test")
def pasteToFile():
win32clipboard.OpenClipboard()
data = win32clipboard.GetClipboardData()
f.write(data)
print(data)
win32clipboard.CloseClipboard()
def copyTable():
pygui.moveTo(161, 787)
pygui.click(button = 'right')
pygui.moveTo(161, 767)
pygui.click(button = 'left')
pygui.moveTo(1282, 380)
pygui.click(button = 'right')
pygui.moveTo(1282, 528)
pygui.moveTo(1382, 528, duration = 0.5)
pygui.moveTo(1582, 528, )
pygui.click(button = 'left')
def selectPrevWeek():
pygui.moveTo(275,745)
pygui.click(button = 'left')
pygui.scroll(-110)
copyTable()
#pasteToFile()
#selectPrevWeek()
f = open("AutoData.txt", "a")
f.write("Test")
def pasteToFile():
win32clipboard.OpenClipboard()
data = win32clipboard.GetClipboardData()
f.write(data)
print(data)
win32clipboard.CloseClipboard()
def copyTable():
pygui.moveTo(161, 787)
pygui.click(button = 'right')
pygui.moveTo(161, 767)
pygui.click(button = 'left')
pygui.moveTo(1282, 380)
pygui.click(button = 'right')
pygui.moveTo(1282, 528)
pygui.moveTo(1382, 528, duration = 0.5)
pygui.moveTo(1582, 528, )
pygui.click(button = 'left')
def selectPrevWeek():
pygui.moveTo(275,745)
pygui.click(button = 'left')
pygui.scroll(-110)
copyTable()
#pasteToFile()
#selectPrevWeek()
reticulate::repl_python()
quit
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)#tidy
library(spotifyr)#spotify web api wrapper class
library(stringr)#string processing
library(ggplot2)#ggplot for testing
library(lubridate) #dates
library(readr) #text file reading
library(knitr) #live knit files
library(reticulate) #python cells and interaction with R requires miniConda
#install.packages("remotes") #
#remotes::install_github("mvkorpel/pickURL")
reticulate::repl_python()
x= 540
y= 755 # or 760
copyTable()
pygui.scroll(-500)
#
# iters=5
# for i in range(iters):
#   copyTable()
#   pasteToFile('AutoData.txt')
#   selectPrevWeek(x,y)
#   y = update_y(y)
#
def pasteToFile(filename = "Autodata.txt"):
f=open(filename, "a", encoding="utf-8")
win32clipboard.OpenClipboard()
data = win32clipboard.GetClipboardData()
cdata= "\n\n\n"+ str(data)
if(cdata != None):
print("got data!\n")
f.write(cdata)
win32clipboard.CloseClipboard()
f.close()
def copyTable():
pygui.moveTo(161, 787)
pygui.click(button = 'right')
pygui.moveTo(161, 767)
pygui.click(button = 'left')
pygui.moveTo(1282, 380,duration = 0.5)
pygui.click(button = 'right')
pygui.moveTo(1282, 528,duration = 0.5)
pygui.moveTo(1382, 528,duration = 0.5)
pygui.moveTo(1582, 528,duration = 0.5)
pygui.click(button = 'left')
def update_x(x):
x_min = 230
x_max = 540
if(x > x_min and x < x_max):
x=- 300
else:
x= x_max
return x
def update_y(y):
y_min = 590
y_max = 760
if(y > y_min and y < y_max):
y= y - 35
if(y < y_min):
y = y_max
return y
def selectPrevWeek(x,y):
pygui.moveTo(279,331, duration = 0.5)
pygui.scroll(-500)
pygui.click(button = 'left', duration =0.6)
pygui.moveTo(540,y, duration = 0.5)
pygui.click(button = 'left')
pygui.hotkey('ctrl','r')
import pyautogui as pygui
import win32clipboard
import sys
x= 540
y= 755 # or 760
copyTable()
pygui.scroll(-500)
#
# iters=5
# for i in range(iters):
#   copyTable()
#   pasteToFile('AutoData.txt')
#   selectPrevWeek(x,y)
#   y = update_y(y)
#
x= 540
y= 755 # or 760
copyTable()
selectPrevWeek(x,y)
#
# iters=5
# for i in range(iters):
#   copyTable()
#   pasteToFile('AutoData.txt')
#   selectPrevWeek(x,y)
#   y = update_y(y)
#
x= 540
y= 755 # or 760
copyTable()
selectPrevWeek(x,y)
#
# iters=5
# for i in range(iters):
#   copyTable()
#   pasteToFile('AutoData.txt')
#   selectPrevWeek(x,y)
#   y = update_y(y)
#
x= 540
y= 755 # or 760
copyTable()
pygui.scroll(-500)
pygui.click(button = 'left', duration =0.6)
pygui.moveTo(540,y, duration = 0.5)
#
# iters=5
# for i in range(iters):
#   copyTable()
#   pasteToFile('AutoData.txt')
#   selectPrevWeek(x,y)
#   y = update_y(y)
#
x= 540
y= 755 # or 760
copyTable()
pygui.scroll(-500)
pygui.moveTo(540,y, duration = 0.5)
pygui.click(button = 'left', duration =0.6)
#
# iters=5
# for i in range(iters):
#   copyTable()
#   pasteToFile('AutoData.txt')
#   selectPrevWeek(x,y)
#   y = update_y(y)
#
x= 540
y= 755 # or 760
copyTable()
pygui.moveTo(279,331, duration = 0.5)
pygui.scroll(-500)
#
# iters=5
# for i in range(iters):
#   copyTable()
#   pasteToFile('AutoData.txt')
#   selectPrevWeek(x,y)
#   y = update_y(y)
#
print('Press Ctrl-C to quit.')
try:
while True:
x, y = pygui.position()
positionStr = 'X: ' + str(x).rjust(4) + ' Y: ' + str(y).rjust(4)
print(positionStr, end='')
print('\b' * len(positionStr), end='', flush=True)
except KeyboardInterrupt:
print('\n')
print('Press Ctrl-C to quit.')
reticulate::repl_python()
import pyautogui as pygui
knitr::opts_chunk$set(echo = TRUE)
